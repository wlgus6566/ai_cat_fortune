"use client";

import type React from "react";
import { useState, useEffect, useCallback, useRef } from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import { useCompatibility } from "@/app/context/CompatibilityContext";
import type { CompatibilityResult } from "@/app/lib/openai";
import CircularProgress from "@/app/components/CircularProgress";
import { Heart, Star, Sparkles } from "lucide-react";
import { toast, Toaster } from "react-hot-toast";
import ShareModal from "@/app/components/ShareModal";
import PageHeader from "@/app/components/PageHeader";
import Lottie from "lottie-react";
import { useSession } from "next-auth/react";

// Ïπ¥Ïπ¥Ïò§ SDK ÌÉÄÏûÖ Ï†ïÏùò
declare global {
  interface Window {
    Kakao: {
      init: (key: string) => void;
      isInitialized: () => boolean;
      Share: {
        sendDefault: (options: KakaoShareOptions) => void;
      };
    };
  }
}

// Ïπ¥Ïπ¥Ïò§ Í≥µÏú† ÏòµÏÖò ÌÉÄÏûÖ
interface KakaoShareOptions {
  objectType: string;
  content: {
    title: string;
    description: string;
    imageUrl: string;
    link: {
      mobileWebUrl: string;
      webUrl: string;
    };
  };
  buttons: {
    title: string;
    link: {
      mobileWebUrl: string;
      webUrl: string;
    };
  }[];
}

// Ïï†ÎãàÎ©îÏù¥ÏÖò Î≥ÄÏàò
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2,
    },
  },
};

// Ïä¨ÎùºÏù¥Îìú Î≥ÄÏàò
const slideInUp = {
  hidden: { y: 50, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: { type: "spring", stiffness: 100, damping: 15 },
  },
};

// Î≥Ñ Ïï†ÎãàÎ©îÏù¥ÏÖò
const starVariants = {
  animate: (i: number) => ({
    scale: [1, 1.2, 1],
    opacity: [0.7, 1, 0.7],
    transition: {
      duration: 3,
      repeat: Number.POSITIVE_INFINITY,
      delay: i * 0.3,
    },
  }),
};

interface CategoryCardProps {
  title: string;
  score: number;
  children: React.ReactNode;
  delay?: number;
  icon?: React.ReactNode;
  color?: string;
  index?: number;
}

const CategoryCard: React.FC<CategoryCardProps> = ({
  title,
  score,
  children,
  delay = 0,
  icon,
  index = 0,
  color = "rgba(255, 107, 158, 0.8)",
}) => {
  const [isOpen, setIsOpen] = useState(index === 0);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay, duration: 0.5 }}
      className="mb-4 rounded-2xl overflow-hidden shadow-sm border border-[#e6e6e6] bg-white"
    >
      <div
        className="p-4 flex items-center justify-between cursor-pointer"
        onClick={() => setIsOpen(!isOpen)}
      >
        <div className="flex items-center">
          <div
            className="w-12 h-12 rounded-full flex items-center justify-center mr-3"
            style={{
              background: `linear-gradient(135deg, ${color}, rgba(255, 255, 255, 0.3))`,
              border: "1px solid rgba(153, 13, 250, 0.2)",
            }}
          >
            {icon}
          </div>
          <div>
            <h3 className="text-lg font-medium text-[#3B2E7E]">{title}</h3>
            <div className="flex items-center mt-1">
              {[...Array(5)].map((_, i) => (
                <div key={i} className="relative w-4 h-4 mr-1">
                  <Star
                    className={`w-4 h-4 ${
                      i < Math.round(score / 20)
                        ? "text-[#FFD966] fill-[#FFD966]"
                        : "text-gray-300"
                    }`}
                  />
                </div>
              ))}
            </div>
          </div>
        </div>
        <div
          className={`w-8 h-8 rounded-full flex items-center justify-center transition-all duration-300 ${
            isOpen
              ? "bg-[#f7f7f7] border border-[#990dfa]/20"
              : "bg-[#f7f7f7] border border-[#990dfa]/20"
          }`}
        >
          <svg
            className={`w-5 h-5 transform transition-transform duration-300 text-[#990dfa] ${
              isOpen ? "rotate-180" : ""
            }`}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M19 9l-7 7-7-7"
            ></path>
          </svg>
        </div>
      </div>
      {isOpen && (
        <div className="px-4 pb-4">
          <div className="bg-[#F9F5FF] p-4 rounded-xl text-gray-700 border border-[#e6e6e6]">
            {children}
          </div>
        </div>
      )}
    </motion.div>
  );
};

export default function CompatibilityResultPage() {
  const router = useRouter();
  const { state } = useCompatibility();
  const [compatibilityData, setCompatibilityData] =
    useState<CompatibilityResult | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [loadingStage, setLoadingStage] = useState(1); // 3Îã®Í≥Ñ Î°úÎî© (1: Ï¥àÍ∏∞, 2: Î∂ÑÏÑùÏ§ë, 3: ÏôÑÎ£å)
  const [showShareModal, setShowShareModal] = useState(false);
  const [resultSaved, setResultSaved] = useState(false);
  const { data: session } = useSession();
  const [savedResultId, setSavedResultId] = useState<number | null>(null); // Ï†ÄÏû•Îêú Í≤∞Í≥º ID
  // API Ìò∏Ï∂ú Ïó¨Î∂ÄÎ•º Ï∂îÏ†ÅÌïòÎäî ref Ï∂îÍ∞Ä
  const hasCalledApi = useRef(false);

  // Î°úÎî© Îã®Í≥ÑÏóê Îî∞Î•∏ Ïù¥ÎØ∏ÏßÄ Î∞òÌôò Ìï®Ïàò
  const getLoadingImage = () => {
    switch (loadingStage) {
      case 1:
        return "/new_cat_magic.png";
      case 2:
        return "/new_cat_book.png";
      case 3:
        return "/new_cat_love.png";
      default:
        return "/new_cat_magic.png";
    }
  };

  // Î°úÎî© Îã®Í≥ÑÏóê Îî∞Î•∏ Î©îÏãúÏßÄ Î∞òÌôò Ìï®Ïàò
  const getLoadingMessage = () => {
    switch (loadingStage) {
      case 1:
        return "ÏÇ¨Ï£º ÏÇ¥Ìé¥Î≥¥Îäî Ï§ëÏù¥ÏïºÏòπ‚Ä¶üîçüê±";
      case 2:
        return "Í∂ÅÌï© ÎßàÎ¨¥Î¶¨ Ï§ëÏù¥ÏïºÏòπ‚Ä¶üìúüêæ";
      case 3:
        return "Ïö¥Î™Ö Ï†ïÎ¶¨ÌïòÎäî Ï§ë‚Ä¶üíåüîÆ";
      default:
        return "ÏÇ¨Ï£º ÏÇ¥Ìé¥Î≥¥Îäî Ï§ëÏù¥ÏïºÏòπ‚Ä¶üîçüê±";
    }
  };

  // Ïπ¥Ïπ¥Ïò§ SDK Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    // Ïπ¥Ïπ¥Ïò§ SDK Ïä§ÌÅ¨Î¶ΩÌä∏ Î°úÎìú
    const script = document.createElement("script");
    script.src = "https://t1.kakaocdn.net/kakao_js_sdk/2.5.0/kakao.min.js";
    // script.integrity =
    //   "sha384-kYPsUbBPlktXsY6/oNHSUDZoTX6+YI51f63jCPENAC7vwVvMUe0JWBZ5t0xk9sUy";
    script.crossOrigin = "anonymous";
    script.async = true;
    script.onload = () => {
      // Kakao SDK Ï¥àÍ∏∞Ìôî
      if (window.Kakao && !window.Kakao.isInitialized()) {
        window.Kakao.init(process.env.NEXT_PUBLIC_KAKAO_JS_KEY || "");
      }
    };
    document.body.appendChild(script);

    return () => {
      document.body.removeChild(script);
    };
  }, []);

  const [heartAnimationData, setHeartAnimationData] = useState<object | null>(
    null
  );

  // Lottie Ïï†ÎãàÎ©îÏù¥ÏÖò Î°úÎî©
  useEffect(() => {
    const loadAnimations = async () => {
      try {
        const heartResponse = await fetch("/lottie/heart2.json");
        const heartData = await heartResponse.json();
        setHeartAnimationData(heartData);
      } catch (error) {
        console.error("Failed to load Lottie animations:", error);
      }
    };

    loadAnimations();
  }, []);

  // useCallbackÏúºÎ°ú Í∞êÏã∏ÏÑú Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò
  const fetchCompatibility = useCallback(async () => {
    // Ïù¥ÎØ∏ APIÎ•º Ìò∏Ï∂úÌñàÎã§Î©¥ Ìï®Ïàò Ï¢ÖÎ£å
    if (hasCalledApi.current) return;

    try {
      // API Ìò∏Ï∂ú Ï§ëÏûÑÏùÑ ÌëúÏãú
      hasCalledApi.current = true;

      // API ÎùºÏö∞Ìä∏Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÏÑúÎ≤ÑÏóêÏÑú OpenAI API Ìò∏Ï∂ú
      const response = await fetch("/api/compatibility", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          person1: state.person1,
          person2: state.person2,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Í∂ÅÌï© Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
      }

      const result = await response.json();
      setCompatibilityData(result);

      // Îç∞Ïù¥ÌÑ∞Í∞Ä Î°úÎìúÎêú ÌõÑ Î°úÎî© Ï§ëÏßÄ
      setLoading(false);
    } catch (error) {
      const errorMessage =
        error instanceof Error
          ? error.message
          : "Í∂ÅÌï© Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.";
      setError(errorMessage);
      setLoading(false);

      // ÏóêÎü¨ Î∞úÏÉù Ïãú Îã§Ïãú API Ìò∏Ï∂ú Í∞ÄÎä•ÌïòÎèÑÎ°ù ÌîåÎûòÍ∑∏ Ï¥àÍ∏∞Ìôî
      hasCalledApi.current = false;
    }
  }, [state.person1, state.person2]);

  useEffect(() => {
    // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞ ÏóÜÏù¥ ÏßÅÏ†ë URL Ï†ëÍ∑ºÌñàÏùÑ Í≤ΩÏö∞ Î¶¨Îã§Ïù¥Î†âÌä∏
    if (!state.person1.name || !state.person2.name) {
      router.push("/compatibility");
      return;
    }

    // Î°úÎî© Îã®Í≥ÑÎ•º 1,2,3ÏùÑ ÏàúÌôòÌïòÎèÑÎ°ù ÏÑ§Ï†ï (Ï∂îÍ∞Ä)
    const stageTimer = setInterval(() => {
      setLoadingStage((prevStage) => (prevStage >= 3 ? 1 : prevStage + 1));
    }, 2000);

    // API Ìò∏Ï∂úÎ°ú Í∂ÅÌï© Î∂ÑÏÑù
    fetchCompatibility();

    // ÌÅ¥Î¶∞ÏóÖ Ìï®ÏàòÏóêÏÑú Ïù∏ÌÑ∞Î≤å Ï†ïÎ¶¨
    return () => {
      clearInterval(stageTimer);
    };
  }, [state, router, fetchCompatibility]);

  // useCallbackÏúºÎ°ú Í∞êÏã∏ÏÑú Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò
  const saveCompatibilityResult = useCallback(async () => {
    if (!compatibilityData || resultSaved) return;

    try {
      setResultSaved(true);
      const response = await fetch("/api/compatibility-results", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          resultType: "love",
          resultData: compatibilityData,
          person1Name: state.person1.name,
          person1Birthdate: state.person1.birthdate,
          person1Gender: state.person1.gender,
          person1Birthtime: state.person1.birthtime,
          person2Name: state.person2.name,
          person2Birthdate: state.person2.birthdate,
          person2Gender: state.person2.gender,
          person2Birthtime: state.person2.birthtime,
          totalScore: compatibilityData.score,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Í≤∞Í≥º Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }

      const responseData = await response.json();
      console.log("Ï†ÄÏû•Îêú Í≤∞Í≥º:", responseData);

      // Ï†ÄÏû•Îêú ID ÏÉÅÌÉúÏóê Ï†ÄÏû•
      setSavedResultId(responseData.id);

      // API ÏùëÎãµÏùò resultDataÏóêÏÑú shareToken Ï∂îÏ∂ú
      const savedShareToken =
        responseData.shareToken ||
        (responseData.resultData && responseData.resultData.shareToken);

      console.log("ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ shareToken:", savedShareToken);

      // compatibilityData ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      if (savedShareToken) {
        setCompatibilityData((prevData) => {
          if (!prevData) return null;
          console.log("compatibilityData ÏóÖÎç∞Ïù¥Ìä∏:", {
            ...prevData,
            shareToken: savedShareToken,
          });
          return {
            ...prevData,
            shareToken: savedShareToken,
          };
        });
      } else {
        console.warn("ÏÑúÎ≤ÑÏóêÏÑú shareTokenÏùÑ Î∞õÏßÄ Î™ªÌñàÏäµÎãàÎã§");
      }
    } catch (error) {
      console.error("Í≤∞Í≥º Ï†ÄÏû• Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
    }
  }, [compatibilityData, resultSaved, state.person1, state.person2]);

  // compatibilityDataÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßå Í≤∞Í≥º Ï†ÄÏû• Î°úÏßÅ Ïã§Ìñâ
  useEffect(() => {
    if (compatibilityData && !loading && !error && !resultSaved) {
      saveCompatibilityResult();
    }
  }, [compatibilityData, loading, error, saveCompatibilityResult, resultSaved]);

  // Í≥µÏú† URL ÏÉùÏÑ± Ìï®Ïàò ÏàòÏ†ï
  const generateShareUrl = () => {
    if (typeof window === "undefined") return "";

    const baseUrl = window.location.origin;

    // shareToken ÌôïÏù∏ Î∞è Î°úÍπÖ
    console.log("ÌòÑÏû¨ compatibilityData:", compatibilityData);
    console.log("Í≥µÏú† ÌÜ†ÌÅ∞:", compatibilityData?.shareToken);

    // shareTokenÏù¥ ÏûàÎäî Í≤ΩÏö∞ /share/[token] ÌòïÏãùÏùò URL ÏÉùÏÑ±
    if (compatibilityData?.shareToken) {
      const shareUrl = `${baseUrl}/share/${compatibilityData.shareToken}`;
      console.log("ÏÉùÏÑ±Îêú Í≥µÏú† URL:", shareUrl);
      return shareUrl;
    }

    // shareTokenÏù¥ ÏóÜÏúºÎ©¥ Í∏∞Ï°¥ Î∞©ÏãùÏúºÎ°ú Í∂ÅÌï© ÌéòÏù¥ÏßÄ ÎßÅÌÅ¨ ÏÉùÏÑ±
    console.log("shareTokenÏù¥ ÏóÜÏñ¥ Í∏∞Î≥∏ URL ÏÉùÏÑ±");
    const userId = session?.user?.id || "anonymous";
    return `${baseUrl}/compatibility?userId=${userId}&shared=true`;
  };

  // ÎßÅÌÅ¨ Î≥µÏÇ¨ Í∏∞Îä•
  const copyToClipboard = () => {
    const shareUrl = generateShareUrl();
    navigator.clipboard
      .writeText(shareUrl)
      .then(() => {
        toast.success("ÎßÅÌÅ¨Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!");
        setShowShareModal(false);
      })
      .catch((err) => {
        toast.error("ÎßÅÌÅ¨ Î≥µÏÇ¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
        console.error("ÎßÅÌÅ¨ Î≥µÏÇ¨ Ïã§Ìå®:", err);
      });
  };

  // Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú†ÌïòÍ∏∞
  const shareToKakao = () => {
    if (!window.Kakao || !window.Kakao.Share || !compatibilityData) {
      toast.error("Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú† Í∏∞Îä•ÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      return;
    }

    // Í≥µÏú† URL ÎØ∏Î¶¨ ÌôïÏù∏
    const shareUrl = generateShareUrl();
    console.log("Ïπ¥Ïπ¥Ïò§ Í≥µÏú† Ï†Ñ ÏÉùÏÑ±Îêú URL:", shareUrl);

    try {
      // Î°úÏª¨ÌôòÍ≤ΩÏù¥Î©¥ Ïπ¥Ïπ¥Ïò§ Í≥µÏú†Í∞Ä Ï†úÎåÄÎ°ú ÏûëÎèôÌïòÏßÄ ÏïäÏùÑ Ïàò ÏûàÏùåÏùÑ ÏïåÎ¶¨Í∏∞
      if (window.location.hostname === "localhost") {
        toast.error(
          "Î°úÏª¨ ÌôòÍ≤ΩÏóêÏÑúÎäî Ïπ¥Ïπ¥Ïò§ Í≥µÏú†Í∞Ä Ï†úÎåÄÎ°ú ÏûëÎèôÌïòÏßÄ ÏïäÏùÑ Ïàò ÏûàÏäµÎãàÎã§."
        );
      }

      // Ïã§Ï†ú ÎèÑÎ©îÏù∏ ÏÇ¨Ïö© (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî Î∞∞Ìè¨Îêú URLÎ°ú Î≥ÄÍ≤Ω)
      const webUrl = "https://v0-aifortune-rose.vercel.app";
      const realShareUrl = shareUrl.replace(window.location.origin, webUrl);
      console.log("ÏµúÏ¢Ö Í≥µÏú† URL:", realShareUrl);

      window.Kakao.Share.sendDefault({
        objectType: "feed",
        content: {
          title: `${state.person1.name}ÎãòÍ≥º ${state.person2.name}ÎãòÏùò Í∂ÅÌï© Í≤∞Í≥º`,
          description: compatibilityData.magicTitle,
          imageUrl: `${window.location.origin}/chemy.png`,
          link: {
            mobileWebUrl: realShareUrl,
            webUrl: realShareUrl,
          },
        },
        buttons: [
          {
            title: "Í∂ÅÌï© ÌôïÏù∏ÌïòÍ∏∞",
            link: {
              mobileWebUrl: realShareUrl,
              webUrl: realShareUrl,
            },
          },
        ],
      });
    } catch (error) {
      console.error("Ïπ¥Ïπ¥Ïò§ Í≥µÏú† ÏóêÎü¨:", error);
      toast.error(
        "Ïπ¥Ïπ¥Ïò§ Í≥µÏú† Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÎßÅÌÅ¨ Î≥µÏÇ¨Î•º Ïù¥Ïö©Ìï¥ Ï£ºÏÑ∏Ïöî."
      );
    }
  };

  // Ïò§ÌñâÏóê Îî∞Î•∏ Ïù¥Î™®Ìã∞ÏΩò Î∞òÌôò Ìï®Ïàò
  const getElementEmoji = (element?: string) => {
    switch (element) {
      case "Î™©":
      case "ÎÇòÎ¨¥":
        return "üåø"; // ÎÇòÎ¨¥, ÏãùÎ¨º
      case "Ìôî":
      case "Î∂à":
        return "üî•"; // Î∂à
      case "ÌÜ†":
        return "üèîÔ∏è"; // ÎïÖ, ÏÇ∞
      case "Í∏à":
        return "üíé"; // Î≥¥ÏÑù, Í∏àÏÜç
      case "Ïàò":
      case "Î¨º":
        return "üíß"; // Î¨ºÎ∞©Ïö∏
      default:
        return "‚ú®"; // Í∏∞Î≥∏Í∞í
    }
  };

  // Îëê Ïò§Ìñâ ÏÇ¨Ïù¥Ïùò ÏÉÅÏÉù/ÏÉÅÍ∑π Í¥ÄÍ≥Ñ Ïù¥Î™®Ìã∞ÏΩò Î∞òÌôò Ìï®Ïàò
  const getCompatibilitySymbol = (element1?: string, element2?: string) => {
    // ÏÉÅÏÉù Í¥ÄÍ≥Ñ: Î™©ÏÉùÌôî, ÌôîÏÉùÌÜ†, ÌÜ†ÏÉùÍ∏à, Í∏àÏÉùÏàò, ÏàòÏÉùÎ™©
    const generatingRelations = [
      { from: "Î™©", to: "Ìôî" },
      { from: "Ìôî", to: "ÌÜ†" },
      { from: "ÌÜ†", to: "Í∏à" },
      { from: "Í∏à", to: "Ïàò" },
      { from: "Ïàò", to: "Î™©" },
    ];

    // ÏÉÅÍ∑π Í¥ÄÍ≥Ñ: Î™©Í∑πÌÜ†, ÌÜ†Í∑πÏàò, ÏàòÍ∑πÌôî, ÌôîÍ∑πÍ∏à, Í∏àÍ∑πÎ™©
    const conflictingRelations = [
      { from: "Î™©", to: "ÌÜ†" },
      { from: "ÌÜ†", to: "Ïàò" },
      { from: "Ïàò", to: "Ìôî" },
      { from: "Ìôî", to: "Í∏à" },
      { from: "Í∏à", to: "Î™©" },
    ];

    // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
    if (!element1 || !element2) return "‚ü∑"; // Ï§ëÎ¶Ω

    // ÏÉÅÏÉù Í¥ÄÍ≥Ñ ÌôïÏù∏
    if (
      generatingRelations.some((r) => r.from === element1 && r.to === element2)
    ) {
      return "‚Üí"; // ÏÉÅÏÉù
    }

    // Ïó≠ÏÉÅÏÉù Í¥ÄÍ≥Ñ ÌôïÏù∏
    if (
      generatingRelations.some((r) => r.from === element2 && r.to === element1)
    ) {
      return "‚Üê"; // Ïó≠ÏÉÅÏÉù
    }

    // ÏÉÅÍ∑π Í¥ÄÍ≥Ñ ÌôïÏù∏
    if (
      conflictingRelations.some((r) => r.from === element1 && r.to === element2)
    ) {
      return "‚áí"; // ÏÉÅÍ∑π
    }

    // Ïó≠ÏÉÅÍ∑π Í¥ÄÍ≥Ñ ÌôïÏù∏
    if (
      conflictingRelations.some((r) => r.from === element2 && r.to === element1)
    ) {
      return "‚áê"; // Ïó≠ÏÉÅÍ∑π
    }

    // ÎèôÏùº Ïò§Ìñâ Í¥ÄÍ≥Ñ
    if (element1 === element2) {
      return "‚ü∫"; // ÎèôÏùº Ïò§Ìñâ
    }

    return "‚ü∑"; // Ï§ëÎ¶Ω Í¥ÄÍ≥Ñ
  };

  if (loading && !compatibilityData?.magicTitle) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#F9F5FF] to-[#F0EAFF]">
        {/* Toaster for notifications */}
        <Toaster position="bottom-center" />

        {/* Share Modal */}
        <AnimatePresence>
          {showShareModal && (
            <ShareModal
              isOpen={showShareModal}
              onClose={() => setShowShareModal(false)}
              onShareKakao={shareToKakao}
              onCopyLink={copyToClipboard}
              title="Í≤∞Í≥º Í≥µÏú†ÌïòÍ∏∞"
            />
          )}
        </AnimatePresence>

        <div className="flex flex-col items-center justify-center flex-grow p-6 text-center min-h-screen">
          <motion.div
            className="w-24 h-28 mb-8 relative"
            animate={{
              y: [0, -10, 0],
            }}
            transition={{
              y: {
                duration: 2,
                ease: "easeInOut",
              },
            }}
          >
            <Image
              src={getLoadingImage()}
              alt="Î°úÎî©Ï§ë"
              width={80}
              height={120}
              className="w-full h-full relative z-10 -rotate-12"
            />
          </motion.div>

          <motion.h2
            className="text-lg font-gothic font-bold mb-6 text-center text-[#3B2E7E]"
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            key={loadingStage} // Î©îÏãúÏßÄ Î≥ÄÍ≤ΩÏãú Ïï†ÎãàÎ©îÏù¥ÏÖò Îã§Ïãú Ïã§Ìñâ
            transition={{
              duration: 0.5,
              ease: "easeOut",
            }}
          >
            {getLoadingMessage()}
          </motion.h2>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#F9F5FF] to-[#F0EAFF]">
        {/* Î∞∞Í≤Ω Ïû•Ïãù ÏöîÏÜå */}
        {[...Array(10)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute text-white opacity-20"
            style={{
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              fontSize: `${Math.random() * 20 + 10}px`,
            }}
            custom={i}
            variants={starVariants}
            animate="animate"
          >
            {Math.random() > 0.7 ? "‚ú®" : Math.random() > 0.5 ? "‚≠ê" : "üåü"}
          </motion.div>
        ))}

        <div className="bg-white shadow-lg rounded-2xl p-8 mb-8 max-w-md w-full border border-[#e6e6e6]">
          <div className="text-center mb-6">
            <div className="w-16 h-16 mx-auto mb-4 text-red-500 flex items-center justify-center">
              <svg
                className="w-full h-full"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                ></path>
              </svg>
            </div>
            <h2 className="text-xl font-bold text-[#3B2E7E]">
              Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§
            </h2>
          </div>
          <p className="text-center text-gray-600 mb-6">{error}</p>
          <button
            onClick={() => router.push("/compatibility")}
            className="w-full px-6 py-3 rounded-xl bg-gradient-to-r from-[#990dfa] to-[#7609c1] text-white font-medium hover:bg-opacity-90 transition-colors"
          >
            Îã§Ïãú ÏãúÎèÑÌïòÍ∏∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#F9F5FF] to-[#F0EAFF]">
      {/* Toaster for notifications */}
      <Toaster position="bottom-center" />

      {/* Share Modal */}
      <AnimatePresence>
        {showShareModal && (
          <ShareModal
            isOpen={showShareModal}
            onClose={() => setShowShareModal(false)}
            onShareKakao={shareToKakao}
            onCopyLink={copyToClipboard}
            title="Í≤∞Í≥º Í≥µÏú†ÌïòÍ∏∞"
          />
        )}
      </AnimatePresence>

      {/* Ïª§Ïä§ÌÖÄ Ìó§Îçî */}
      <PageHeader
        title="Í∂ÅÌï© Í≤∞Í≥º"
        className="bg-white shadow-md relative z-10"
      />
      <div className="container max-w-md mx-auto px-4 py-6 relative z-10 pb-28">
        {/* Í≤∞Í≥º Ïª®ÌÖåÏù¥ÎÑà */}
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate="visible"
          className="space-y-6"
        >
          {/* ÏÉÅÎã® ÏöîÏÜå: Ï†úÎ™© Î∞è ÌÖåÎßà */}
          <motion.div variants={slideInUp} className="text-center mt-8 mb-32">
            <h1 className="text-2xl font-bold mb-4 px-8 font-gothic text-[#3B2E7E] word-break-keep">
              {compatibilityData?.magicTitle || "ÎÑàÏôÄ ÎÇò, Ïö∞Ï£ºÍ∞Ä ÌóàÎùΩÌïú Í∂ÅÌï©"}
            </h1>
            <p className="text-lg opacity-90 bg-[#990dfa]/10 inline-block px-4 py-1 rounded-full text-[#990dfa]">
              <span className="font-semibold">
                {compatibilityData?.compatibilityTheme || "ÏÉÅÏÉùÏùò Í∏∞Ïö¥"}
              </span>
            </p>
          </motion.div>

          {/* Ï†êÏàò ÏöîÏïΩ Ïπ¥Îìú */}
          <motion.div
            variants={slideInUp}
            className="bg-white relative rounded-2xl p-6 mb-8 border border-[#e6e6e6] shadow-sm"
          >
            <div className="absolute -top-[123px] left-1/2 -translate-x-1/2 -z-1">
              <Image
                src="/new_cat_thumb.png"
                alt="logo"
                width={100}
                height={100}
              />
              {heartAnimationData && (
                <Lottie
                  animationData={heartAnimationData}
                  style={{
                    width: 30,
                    height: 30,
                    position: "absolute",
                    right: "-20%",
                    top: "50%",
                  }}
                />
              )}
            </div>
            {/* ÏõêÌòï Ï∞®Ìä∏ */}
            <div className="flex justify-center mb-6">
              <div className="relative">
                <motion.div
                  className="absolute -inset-4 rounded-full opacity-20 blur-xl"
                  style={{
                    background:
                      "linear-gradient(135deg,rgb(255, 190, 229),rgb(255, 187, 215))",
                  }}
                  animate={{
                    opacity: [0.2, 0.4, 0.2],
                    scale: [1, 1.05, 1],
                  }}
                  transition={{
                    duration: 3,
                    repeat: Number.POSITIVE_INFINITY,
                    ease: "easeInOut",
                  }}
                />
                <CircularProgress
                  percentage={compatibilityData?.score || 83}
                  size={150}
                  strokeWidth={10}
                  color="rgb(255, 0, 0)"
                />
                <div className="absolute inset-0 flex items-center justify-center text-center">
                  <span className="text-3xl font-bold text-purple-700">
                    {compatibilityData?.score || 83}
                  </span>
                </div>
              </div>
            </div>

            <div className="flex items-center justify-center mb-6">
              <div className="mr-4 text-2xl">
                <span className="font-medium text-[#3B2E7E]">
                  {state.person1.name}
                </span>
              </div>
              <motion.div
                className="bg-gradient-to-br from-[red] to-[red] rounded-full p-2"
                animate={{
                  scale: [1, 1.1, 1],
                }}
                transition={{
                  duration: 1.5,
                  repeat: Number.POSITIVE_INFINITY,
                  ease: "easeInOut",
                }}
              >
                <Heart className="w-8 h-8 text-white fill-white" />
              </motion.div>
              <div className="ml-4 text-2xl">
                <span className="font-medium text-[#3B2E7E]">
                  {state.person2.name}
                </span>
              </div>
            </div>

            <p className="text-center font-medium text-md text-[#3B2E7E]">
              {compatibilityData?.summary ||
                "Ìï®Íªò ÏûàÏùÑÏàòÎ°ù Îçî ÎπõÎÇòÎäî Ïù∏Ïó∞Ïù¥Îã§ÎÉ•~"}
            </p>
          </motion.div>

          {/* ÏùåÏñëÏò§Ìñâ Î∂ÑÏÑù ÏÑπÏÖò - Î≥ÑÎèÑ ÏÑπÏÖòÏúºÎ°ú Ï∂îÏ∂ú */}
          <motion.div variants={slideInUp} className="mb-24">
            <div className="text-left mb-6">
              <h2 className="text-xl font-bold text-[#3B2E7E]">
                ÏùåÏñëÏò§Ìñâ Î∂ÑÏÑù
              </h2>
              <p className="text-sm text-gray-600 mt-2 max-w-md mx-auto">
                ÏùåÏñëÏò§ÌñâÏùÄ Ïö∞Ï£ºÏôÄ ÎßåÎ¨ºÏùò Í∏∞Ïö¥ÏùÑ ÏÑ§Î™ÖÌïòÎäî ÎèôÏñë Ï≤†ÌïôÏúºÎ°ú, Îëê
                ÏÇ¨ÎûåÏùò ÏóêÎÑàÏßÄÍ∞Ä Ïñ¥ÎñªÍ≤å ÏÉÅÌò∏ÏûëÏö©ÌïòÎäîÏßÄ Î≥¥Ïó¨Ï§çÎãàÎã§
              </p>
            </div>

            <div className="bg-white rounded-2xl border border-[#e6e6e6] shadow-sm overflow-hidden relative">
              {/* Î∞∞Í≤Ω Ïû•Ïãù */}
              <div className="absolute -top-20 -right-20 w-40 h-40 bg-[#990dfa]/10 rounded-full blur-3xl"></div>
              <div className="absolute -bottom-20 -left-20 w-40 h-40 bg-[#7609c1]/10 rounded-full blur-3xl"></div>

              {/* Îëê ÏÇ¨ÎûåÏùò Ïò§Ìñâ Ï†ïÎ≥¥ */}
              <div className="flex flex-col md:flex-row gap-4 relative z-10 p-4">
                {/* Ï≤´ Î≤àÏß∏ ÏÇ¨Îûå Ïπ¥Îìú */}
                <div className="flex-1 bg-[#e8eaff] rounded-xl p-3 border border-[#e6e6e6] relative overflow-hidden">
                  <div className="flex items-center gap-4 mb-4">
                    <div className="text-xl">
                      {getElementEmoji(
                        compatibilityData?.details?.yinYangAnalysis?.user
                          ?.element
                      )}
                    </div>
                    <h3 className="text-xl font-semibold text-[#3B2E7E]">
                      {state.person1.name}
                    </h3>
                  </div>

                  <div className="grid grid-cols-2 gap-3 mb-4">
                    <div className="bg-white rounded-lg p-3 text-center">
                      <span className="block text-xs text-gray-500">Ïò§Ìñâ</span>
                      <span className="block text-lg font-bold text-[#3B2E7E]">
                        {getElementEmoji(
                          compatibilityData?.details?.yinYangAnalysis?.user
                            ?.element
                        )}{" "}
                        {compatibilityData?.details?.yinYangAnalysis?.user
                          ?.element || "Î™©"}
                      </span>
                    </div>
                    <div className="bg-white rounded-lg p-3 text-center">
                      <span className="block text-xs text-gray-500">ÏùåÏñë</span>
                      <span className="block text-lg font-bold text-[#3B2E7E]">
                        {compatibilityData?.details?.yinYangAnalysis?.user
                          ?.yinYang === "Ïùå"
                          ? "‚òΩ"
                          : "‚òÄÔ∏è"}{" "}
                        {compatibilityData?.details?.yinYangAnalysis?.user
                          ?.yinYang || "Ïñë"}
                      </span>
                    </div>
                  </div>

                  <div className="bg-white rounded-lg p-4">
                    <p className="font-dodamdodam text-sm text-gray-700">
                      &ldquo;
                      {
                        compatibilityData?.details?.yinYangAnalysis?.user
                          ?.description
                      }
                      &rdquo;
                    </p>
                  </div>
                </div>

                {/* Ï§ëÏïô ÏÉÅÏÉù/ÏÉÅÍ∑π Í¥ÄÍ≥Ñ ÌëúÏãú */}
                <div className="hidden md:flex flex-col items-center justify-center relative min-w-[100px]">
                  <div className="w-20 h-20 rounded-full bg-gradient-to-br from-[#990dfa]/20 to-[#7609c1]/20 flex items-center justify-center z-10">
                    <div className="text-2xl text-[#990dfa]">
                      {getCompatibilitySymbol(
                        compatibilityData?.details?.yinYangAnalysis?.user
                          ?.element,
                        compatibilityData?.details?.yinYangAnalysis?.partner
                          ?.element
                      )}
                    </div>
                  </div>
                  <div className="absolute w-[2px] h-full bg-gradient-to-b from-[#990dfa]/20 via-[#7609c1]/40 to-[#990dfa]/20"></div>
                </div>

                {/* Îëê Î≤àÏß∏ ÏÇ¨Îûå Ïπ¥Îìú */}
                <div className="flex-1 bg-[#dceaf5] rounded-xl p-5 border border-[#e6e6e6] relative overflow-hidden">
                  <div className="flex items-center gap-4 mb-4">
                    <div className="text-xl">
                      {getElementEmoji(
                        compatibilityData?.details?.yinYangAnalysis?.partner
                          ?.element
                      )}
                    </div>
                    <h3 className="text-xl font-semibold text-[#3B2E7E]">
                      {state.person2.name}
                    </h3>
                  </div>

                  <div className="grid grid-cols-2 gap-3 mb-4">
                    <div className="bg-white rounded-lg p-3 text-center">
                      <span className="block text-xs text-gray-500">Ïò§Ìñâ</span>
                      <span className="block text-lg font-bold text-[#3B2E7E]">
                        {getElementEmoji(
                          compatibilityData?.details?.yinYangAnalysis?.partner
                            ?.element
                        )}{" "}
                        {compatibilityData?.details?.yinYangAnalysis?.partner
                          ?.element || "Ìôî"}
                      </span>
                    </div>
                    <div className="bg-white rounded-lg p-3 text-center">
                      <span className="block text-xs text-gray-500">ÏùåÏñë</span>
                      <span className="block text-lg font-bold text-[#3B2E7E]">
                        {compatibilityData?.details?.yinYangAnalysis?.partner
                          ?.yinYang === "Ïùå"
                          ? "‚òΩ"
                          : "‚òÄÔ∏è"}{" "}
                        {compatibilityData?.details?.yinYangAnalysis?.partner
                          ?.yinYang || "Ïñë"}
                      </span>
                    </div>
                  </div>

                  <div className="bg-white rounded-lg p-4">
                    <p className="font-dodamdodam text-sm text-gray-700">
                      &ldquo;
                      {
                        compatibilityData?.details?.yinYangAnalysis?.partner
                          ?.description
                      }
                      &rdquo;
                    </p>
                  </div>
                </div>
              </div>

              {/* ÏÉÅÏÑ± Î∂ÑÏÑù Í≤∞Í≥º */}
              <div className="mt-2 p-5 bg-[#F9F5FF] m-4 rounded-xl border border-[#e6e6e6]">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-semibold flex items-center text-[#3B2E7E]">
                    <span className="mr-2">‚ú®</span> ÏÉÅÏÑ± Î∂ÑÏÑù
                  </h3>
                  <div className="bg-white rounded-full px-3 py-1 text-sm text-[#990dfa]">
                    Ï†êÏàò:{" "}
                    <span className="font-bold">
                      {compatibilityData?.details?.yinYangAnalysis
                        ?.compatibility?.compatibilityScore || 91}
                    </span>
                  </div>
                </div>

                <p className="mb-4 text-sm text-gray-700">
                  {
                    compatibilityData?.details?.yinYangAnalysis?.compatibility
                      ?.description
                  }
                </p>

                <div className="bg-white rounded-lg p-4 flex items-center">
                  <span className="text-lg mr-2">üêæ</span>
                  <p className="text-sm font-dodamdodam text-[#990dfa]">
                    {
                      compatibilityData?.details?.yinYangAnalysis?.compatibility
                        ?.catComment
                    }
                  </p>
                </div>
              </div>
            </div>
          </motion.div>

          {/* ÏÑ∏Î∂Ä Î∂ÑÏÑù Ïπ¥ÎìúÎì§ */}
          <motion.div variants={slideInUp} className="space-y-4">
            <h2 className="text-xl font-bold mb-4 flex items-center text-[#3B2E7E]">
              <Star className="h-5 w-5 text-[#990dfa] mr-2 fill-[#990dfa]" />
              ÏÑ∏Î∂Ä Î∂ÑÏÑù
            </h2>
            {/* ÏÑ±Í≤© Í∂ÅÌï© */}
            <CategoryCard
              title="ÏÑ±Í≤© Í∂ÅÌï©"
              score={
                compatibilityData?.details?.personalityCompatibility?.score ||
                85
              }
              delay={0.1}
              icon={<Sparkles className="h-6 w-6 text-white" />}
              color="rgba(153, 13, 250, 0.8)"
            >
              <p className="mb-3">
                {compatibilityData?.details?.personalityCompatibility?.analysis}
              </p>
              <div className="bg-[#990dfa]/10 p-3 rounded-lg border border-[#990dfa]/20">
                <p className="text-sm font-dodamdodam font-medium text-[#3B2E7E]">
                  üêæ {compatibilityData?.details?.personalityCompatibility?.tip}
                </p>
              </div>
            </CategoryCard>

            {/* Ïó∞Ïï† Ïä§ÌÉÄÏùº */}
            <CategoryCard
              title="Ïó∞Ïï† Ïä§ÌÉÄÏùº"
              score={compatibilityData?.details?.loveStyle?.score || 78}
              delay={0.2}
              icon={<Heart className="h-6 w-6 text-white" />}
              color="rgba(255, 77, 128, 0.8)"
            >
              <p className="mb-3">
                {compatibilityData?.details?.loveStyle?.analysis}
              </p>
              <div className="bg-[#FF4D80]/10 p-3 rounded-lg border border-[#FF4D80]/20">
                <p className="text-sm font-dodamdodam font-medium text-[#3B2E7E]">
                  üêæ {compatibilityData?.details?.loveStyle?.tip}
                </p>
              </div>
            </CategoryCard>

            {/* Í∞àÎì± ÏöîÏÜå */}
            <CategoryCard
              title="Í∞àÎì± ÏöîÏÜå"
              score={compatibilityData?.details?.conflictElements?.score || 67}
              delay={0.3}
              icon={
                <svg
                  className="h-6 w-6 text-white"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
                  />
                </svg>
              }
              color="rgba(255, 159, 64, 0.8)"
            >
              <p className="mb-3">
                {compatibilityData?.details?.conflictElements?.analysis}
              </p>
              <div className="bg-[#FF9F40]/10 p-3 rounded-lg border border-[#FF9F40]/20">
                <p className="text-sm font-dodamdodam font-medium text-[#3B2E7E]">
                  üêæ {compatibilityData?.details?.conflictElements?.tip}
                </p>
              </div>
            </CategoryCard>

            {/* ÎØ∏Îûò Ï†ÑÎßù */}
            <CategoryCard
              title="ÎØ∏Îûò Ï†ÑÎßù"
              score={compatibilityData?.details?.futurePerspective?.score || 88}
              delay={0.4}
              icon={
                <svg
                  className="h-6 w-6 text-white"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M13 10V3L4 14h7v7l9-11h-7z"
                  />
                </svg>
              }
              color="rgba(72, 187, 120, 0.8)"
            >
              <p className="mb-3">
                {compatibilityData?.details?.futurePerspective?.analysis}
              </p>
              <div className="bg-[#48BB78]/10 p-3 rounded-lg border border-[#48BB78]/20">
                <p className="text-sm font-dodamdodam font-medium text-[#3B2E7E]">
                  üêæ {compatibilityData?.details?.futurePerspective?.tip}
                </p>
              </div>
            </CategoryCard>
          </motion.div>

          {/* ÌïòÎã® ÏΩòÌÖêÏ∏† */}
          <motion.div
            variants={slideInUp}
            className="bg-white rounded-2xl p-6 mt-8 border border-[#e6e6e6] shadow-sm"
          >
            <h3 className="text-lg font-bold mb-4 flex items-center text-[#3B2E7E]">
              <span className="mr-2">üßô‚Äç‚ôÇÔ∏è</span> Ï†ÑÏ≤¥ Ï°∞Ïñ∏
            </h3>
            <p className="mb-6 leading-relaxed text-gray-700">
              {compatibilityData?.totalAdvice}
            </p>

            <div className="bg-[#F9F5FF] p-4 rounded-lg border border-[#e6e6e6]">
              <h3 className="text-md font-bold mb-2 flex items-center text-[#3B2E7E]">
                <span className="mr-2">üéÅ</span> ÌñâÏö¥ ÏïÑÏù¥ÌÖú
              </h3>
              <p className="text-sm text-gray-700">
                {compatibilityData?.luckyItem}
              </p>
            </div>
            <div className="mt-2 bg-[#F9F5FF] p-4 rounded-lg border border-[#e6e6e6]">
              <h3 className="text-md font-bold mb-2 flex items-center text-[#3B2E7E]">
                <span className="mr-2">üíë</span> Ï∂îÏ≤ú Îç∞Ïù¥Ìä∏
              </h3>
              <p className="text-sm text-gray-700">
                {compatibilityData?.recommendedDate}
              </p>
            </div>
          </motion.div>
          <motion.div
            variants={slideInUp}
            className="relative text-center mt-8 mb-12 h-[250px]"
          >
            <motion.div
              className="absolute left-10 max-w-[300px] transform -translate-x-1/2 bg-[#FFF7EA] border-[3px] border-[#FFD5A8] rounded-full px-6 py-3 shadow-xl z-10"
              initial={{ opacity: 0, scale: 0.7, y: 10 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.8, y: 10 }}
              transition={{ duration: 0.4, type: "spring", bounce: 0.4 }}
            >
              <div className="relative">
                <p className="text-[#3B2E7E] text-md text-center font-semibold">
                  {compatibilityData?.catComment}
                </p>
                <div
                  className="absolute -bottom-5 left-1/3 transform -translate-x-1/2 
              w-0 h-0 border-l-[10px] border-r-[10px] border-t-[10px] 
              border-l-transparent border-r-transparent border-t-[#FFF7EA]"
                ></div>
              </div>
              <span className="mt-5 absolute left-10">
                <Image
                  src="/new_cat.png"
                  alt="ÎÉ•ÎÉ•Ïù¥"
                  width={100}
                  height={100}
                  className=""
                />
              </span>
            </motion.div>
          </motion.div>

          {/* ÌïòÎã® Î≤ÑÌäº */}
          <motion.div variants={slideInUp} className="text-center mt-8 mb-12">
            <div className="flex gap-4 justify-center">
              <button
                onClick={() => router.push("/compatibility")}
                className="px-8 py-3 bg-white text-[#990dfa] border border-[#990dfa] rounded-full font-medium shadow-sm hover:bg-[#F9F5FF] transition-all"
              >
                Îã§Ïãú Í∂ÅÌï© Î≥¥Í∏∞
              </button>

              <button
                onClick={() => setShowShareModal(true)}
                className="px-8 py-3 bg-gradient-to-r from-[#990dfa] to-[#7609c1] text-white rounded-full font-medium shadow-sm hover:opacity-90 transition-all"
              >
                Í≤∞Í≥º Í≥µÏú†ÌïòÍ∏∞
              </button>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
}
